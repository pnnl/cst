. $HOME/grid/venv/bin/activate

pushd . > '/dev/null';
SCRIPT_PATH="${BASH_SOURCE[0]:-$0}";

while [ -h "$SCRIPT_PATH" ];
do
    cd "$( dirname -- "$SCRIPT_PATH"; )";
    SCRIPT_PATH="$( readlink -f -- "$SCRIPT_PATH"; )";
done

cd "$( dirname -- "$SCRIPT_PATH"; )" > '/dev/null';
SCRIPT_PATH="$( pwd; )";
popd  > '/dev/null';

# Co-simulation user and host
# This section should be checked by user before running
export SIM_UID=$UID
export SIM_USER=$USER
export SIM_HOST=gage.pnl.gov
export SIM_WSL_HOST=
export SIM_WSL_PORT=
export SIM_DIR=$SCRIPT_PATH

# Co-simulation database, user, password and directory in docker
export COSIM_DB=copper
export COSIM_USER=worker
export COSIM_PASSWORD=worker
export COSIM_HOME=/home/$COSIM_USER

# Co-simulation repo install directories
export BUILD_DIR=$SIM_DIR/scripts/build
export DOCKER_DIR=$SIM_DIR/scripts/docker
export STACK_DIR=$SIM_DIR/scripts/stack

# Postgres
#export COSIM_POSTGRES_DB=$COSIM_DB
export POSTGRES_HOST=$SIM_HOST
export POSTGRES_PORT=5432
# Launch postgres with admin
export PGADMIN_DEFAULT_EMAIL=user@domain.com
export PGADMIN_DEFAULT_PASSWORD=SuperSecret

# Mongo
#export COSIM_MONGO_DB=$COSIM_DB
export MONGO_HOST=mongodb://$SIM_HOST:27017
#export MONGO_POST=27017
# Launch mongo with admin
export MONGODB_INITDB_ROOT_USERNAME=admin
export MONGODB_INITDB_ROOT_PASSWORD=SuperSecret

# Airflow
# add user id for linux
export AIRFLOW_UID=$(id -u)
# add user id for windows
# export AIRFLOW_UID=50000
export AIRFLOW_GID=0
export AIRFLOW_PROJ_DIR=$SIM_DIR/run
# export _AIRFLOW_WWW_USER_USERNAME=
# export _AIRFLOW_WWW_USER_PASSWORD=

# Populate environment variables to docker files
envsubst < $DOCKER_DIR/env/airflow.Dockerfile > $DOCKER_DIR/airflow.Dockerfile
envsubst < $DOCKER_DIR/env/jupyter.Dockerfile > $DOCKER_DIR/jupyter.Dockerfile
envsubst < $DOCKER_DIR/env/python.Dockerfile > $DOCKER_DIR/python.Dockerfile
envsubst < $STACK_DIR/env/init-mongo.js > $STACK_DIR/init-mongo.js
envsubst < $STACK_DIR/env/init-db.sql > $STACK_DIR/init-db.sql

# Building without docker define LOCAL_ENV
LOCAL_ENV=yes
if [[ -z $LOCAL_ENV ]]; then
  echo "No local environment build variables defined"
else

export REPO_DIR=$HOME/grid
export INSTDIR=$REPO_DIR/tenv
export TESPDIR=$REPO_DIR/tesp
export MESPDIR=$REPO_DIR/mesp

# COMPILE exports
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
export PYHELICS_INSTALL=$INSTDIR
export GLPATH=$INSTDIR/lib/gridlabd:$INSTDIR/share/gridlabd
export CPLUS_INCLUDE_PATH=/usr/include/hdf5/serial:$INSTDIR/include
export FNCS_INCLUDE_DIR=$INSTDIR/include
export FNCS_LIBRARY=$INSTDIR/lib
export LD_LIBRARY_PATH=$INSTDIR/lib
export LD_RUN_PATH=$INSTDIR/lib

# PATH
export PATH=$INSTDIR/bin:$PATH
export PATH=$JAVA_HOME:$PATH
export PATH=$PATH:$INSTDIR/energyplus
export PATH=$PATH:$INSTDIR/energyplus/PreProcess
export PATH=$PATH:$INSTDIR/energyplus/PostProcess

# PSST environment variables
export PSST_SOLVER=ipopt
# PSST_SOLVER=$INSTDIR/ibm/cplex/bin/x86-64_linux/cplexamp
# 'PSST_SOLVER path' -- one of "cbc", "ipopt", "$INSTDIR/ibm/cplex/bin/x86-64_linux/cplexamp"
export PSST_WARNING=ignore
# 'PSST_WARNING action' -- one of "error", "ignore", "always", "default", "module", or "once"

# PROXY export if needed
# export HTTPS_PROXY=http://proxy01.pnl.gov:3128

fi